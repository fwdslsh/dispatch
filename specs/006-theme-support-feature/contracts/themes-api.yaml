openapi: 3.0.0
info:
  title: Dispatch Theme Management API
  version: 1.0.0
  description: REST API for theme management in Dispatch single-user application

servers:
  - url: http://localhost:3030/api
    description: Development server
  - url: https://localhost:5173/api
    description: Development server (SSL)

security:
  - terminalKey: []

components:
  securitySchemes:
    terminalKey:
      type: apiKey
      in: query
      name: authKey
      description: TERMINAL_KEY authentication (required for all endpoints)

  schemas:
    Theme:
      type: object
      required:
        - id
        - name
        - source
        - cssVariables
      properties:
        id:
          type: string
          description: Theme identifier (filename without .json)
          example: "dracula"
        name:
          type: string
          description: Display name
          example: "Dracula"
        description:
          type: string
          description: Theme description
          example: "Dark theme inspired by Dracula color scheme"
        source:
          type: string
          enum: [preset, custom]
          description: Theme source type
        filePath:
          type: string
          description: Absolute path to theme JSON file
        cssVariables:
          type: object
          description: CSS custom property key-value pairs
          additionalProperties:
            type: string
        isActive:
          type: boolean
          description: Whether theme is currently active
        lastModified:
          type: string
          format: date-time
          description: File modification timestamp

    ThemeUpload:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: Theme JSON file (max 5MB)

    ValidationResult:
      type: object
      required:
        - valid
        - errors
        - warnings
      properties:
        valid:
          type: boolean
          description: Whether validation passed
        errors:
          type: array
          items:
            type: string
          description: Blocking validation errors
        warnings:
          type: array
          items:
            type: string
          description: Non-blocking validation warnings

    ActiveThemeResponse:
      type: object
      required:
        - themeName
        - cssVariables
      properties:
        themeName:
          type: string
          description: Active theme identifier
        cssVariables:
          type: object
          description: CSS variables to apply
          additionalProperties:
            type: string
        source:
          type: string
          enum: [workspace, global, fallback]
          description: Resolution source

    DeletionCheckResponse:
      type: object
      required:
        - canDelete
      properties:
        canDelete:
          type: boolean
          description: Whether theme can be deleted
        reason:
          type: string
          description: Reason if deletion is blocked
        workspaces:
          type: array
          items:
            type: string
          description: Workspace names using this theme

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details

paths:
  /themes:
    get:
      summary: List all available themes
      tags: [Themes]
      description: Returns all themes from both preset and custom directories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  themes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Theme'
        '401':
          description: Unauthorized (invalid authKey)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Upload new custom theme
      tags: [Themes]
      description: Upload and validate a new theme file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeUpload'
      responses:
        '201':
          description: Theme uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  theme:
                    $ref: '#/components/schemas/Theme'
                  validation:
                    $ref: '#/components/schemas/ValidationResult'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      validation:
                        $ref: '#/components/schemas/ValidationResult'
        '401':
          description: Unauthorized
        '413':
          description: File too large (> 5MB)

  /themes/{themeId}:
    get:
      summary: Get specific theme
      tags: [Themes]
      parameters:
        - name: themeId
          in: path
          required: true
          schema:
            type: string
          description: Theme identifier
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        '404':
          description: Theme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete custom theme
      tags: [Themes]
      description: Delete a custom theme (preset themes cannot be deleted)
      parameters:
        - name: themeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Theme deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Cannot delete theme (in use or preset)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ErrorResponse'
                  - type: object
                    properties:
                      canDelete:
                        type: boolean
                      reason:
                        type: string
                      workspaces:
                        type: array
                        items:
                          type: string
        '404':
          description: Theme not found

  /themes/{themeId}/can-delete:
    get:
      summary: Check if theme can be deleted
      tags: [Themes]
      description: Returns whether theme is safe to delete (not in use)
      parameters:
        - name: themeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionCheckResponse'

  /themes/active:
    get:
      summary: Get active theme
      tags: [Themes]
      description: Returns theme resolved via hierarchy (workspace > global > fallback)
      parameters:
        - name: workspaceId
          in: query
          schema:
            type: string
          description: Optional workspace ID for workspace-specific theme
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveThemeResponse'

  /preferences:
    put:
      summary: Update user preferences
      tags: [Preferences]
      description: Update global default theme preference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - category
                - preferences
              properties:
                category:
                  type: string
                  enum: [themes]
                preferences:
                  type: object
                  properties:
                    globalDefault:
                      type: string
                      description: Theme ID to set as global default
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  preferences:
                    type: object
        '401':
          description: Unauthorized

  /workspaces/{workspaceId}:
    put:
      summary: Update workspace settings
      tags: [Workspaces]
      description: Set workspace-specific theme override
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                theme_override:
                  type: string
                  nullable: true
                  description: Theme ID or null to clear override
      responses:
        '200':
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  workspace:
                    type: object
        '404':
          description: Workspace not found
        '401':
          description: Unauthorized

tags:
  - name: Themes
    description: Theme management operations
  - name: Preferences
    description: User preference management
  - name: Workspaces
    description: Workspace settings
